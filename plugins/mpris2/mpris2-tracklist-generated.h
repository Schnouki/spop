/*
 * Generated by gdbus-codegen 2.41.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __MPRIS2_TRACKLIST_GENERATED_H__
#define __MPRIS2_TRACKLIST_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2.TrackList */

#define MPRIS2_TYPE_TRACK_LIST (mpris2_track_list_get_type ())
#define MPRIS2_TRACK_LIST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MPRIS2_TYPE_TRACK_LIST, Mpris2TrackList))
#define MPRIS2_IS_TRACK_LIST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MPRIS2_TYPE_TRACK_LIST))
#define MPRIS2_TRACK_LIST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MPRIS2_TYPE_TRACK_LIST, Mpris2TrackListIface))

struct _Mpris2TrackList;
typedef struct _Mpris2TrackList Mpris2TrackList;
typedef struct _Mpris2TrackListIface Mpris2TrackListIface;

struct _Mpris2TrackListIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_track) (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent);

  gboolean (*handle_get_tracks_metadata) (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_TrackIds);

  gboolean (*handle_go_to) (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId);

  gboolean (*handle_remove_track) (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId);

  gboolean  (*get_can_edit_tracks) (Mpris2TrackList *object);

  const gchar *const * (*get_tracks) (Mpris2TrackList *object);

  void (*track_added) (
    Mpris2TrackList *object,
    GVariant *arg_Metadata,
    const gchar *arg_AfterTrack);

  void (*track_list_replaced) (
    Mpris2TrackList *object,
    const gchar *const *arg_Tracks,
    const gchar *arg_CurrentTrack);

  void (*track_metadata_changed) (
    Mpris2TrackList *object,
    const gchar *arg_TrackId,
    GVariant *arg_Metadata);

  void (*track_removed) (
    Mpris2TrackList *object,
    const gchar *arg_TrackId);

};

GType mpris2_track_list_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mpris2_track_list_interface_info (void);
guint mpris2_track_list_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mpris2_track_list_complete_get_tracks_metadata (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation,
    GVariant *Metadata);

void mpris2_track_list_complete_add_track (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation);

void mpris2_track_list_complete_remove_track (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation);

void mpris2_track_list_complete_go_to (
    Mpris2TrackList *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void mpris2_track_list_emit_track_list_replaced (
    Mpris2TrackList *object,
    const gchar *const *arg_Tracks,
    const gchar *arg_CurrentTrack);

void mpris2_track_list_emit_track_added (
    Mpris2TrackList *object,
    GVariant *arg_Metadata,
    const gchar *arg_AfterTrack);

void mpris2_track_list_emit_track_removed (
    Mpris2TrackList *object,
    const gchar *arg_TrackId);

void mpris2_track_list_emit_track_metadata_changed (
    Mpris2TrackList *object,
    const gchar *arg_TrackId,
    GVariant *arg_Metadata);



/* D-Bus method calls: */
void mpris2_track_list_call_get_tracks_metadata (
    Mpris2TrackList *proxy,
    const gchar *const *arg_TrackIds,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mpris2_track_list_call_get_tracks_metadata_finish (
    Mpris2TrackList *proxy,
    GVariant **out_Metadata,
    GAsyncResult *res,
    GError **error);

gboolean mpris2_track_list_call_get_tracks_metadata_sync (
    Mpris2TrackList *proxy,
    const gchar *const *arg_TrackIds,
    GVariant **out_Metadata,
    GCancellable *cancellable,
    GError **error);

void mpris2_track_list_call_add_track (
    Mpris2TrackList *proxy,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mpris2_track_list_call_add_track_finish (
    Mpris2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mpris2_track_list_call_add_track_sync (
    Mpris2TrackList *proxy,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent,
    GCancellable *cancellable,
    GError **error);

void mpris2_track_list_call_remove_track (
    Mpris2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mpris2_track_list_call_remove_track_finish (
    Mpris2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mpris2_track_list_call_remove_track_sync (
    Mpris2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GError **error);

void mpris2_track_list_call_go_to (
    Mpris2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mpris2_track_list_call_go_to_finish (
    Mpris2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mpris2_track_list_call_go_to_sync (
    Mpris2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *mpris2_track_list_get_tracks (Mpris2TrackList *object);
gchar **mpris2_track_list_dup_tracks (Mpris2TrackList *object);
void mpris2_track_list_set_tracks (Mpris2TrackList *object, const gchar *const *value);

gboolean mpris2_track_list_get_can_edit_tracks (Mpris2TrackList *object);
void mpris2_track_list_set_can_edit_tracks (Mpris2TrackList *object, gboolean value);


/* ---- */

#define MPRIS2_TYPE_TRACK_LIST_PROXY (mpris2_track_list_proxy_get_type ())
#define MPRIS2_TRACK_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MPRIS2_TYPE_TRACK_LIST_PROXY, Mpris2TrackListProxy))
#define MPRIS2_TRACK_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MPRIS2_TYPE_TRACK_LIST_PROXY, Mpris2TrackListProxyClass))
#define MPRIS2_TRACK_LIST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MPRIS2_TYPE_TRACK_LIST_PROXY, Mpris2TrackListProxyClass))
#define MPRIS2_IS_TRACK_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MPRIS2_TYPE_TRACK_LIST_PROXY))
#define MPRIS2_IS_TRACK_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MPRIS2_TYPE_TRACK_LIST_PROXY))

typedef struct _Mpris2TrackListProxy Mpris2TrackListProxy;
typedef struct _Mpris2TrackListProxyClass Mpris2TrackListProxyClass;
typedef struct _Mpris2TrackListProxyPrivate Mpris2TrackListProxyPrivate;

struct _Mpris2TrackListProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Mpris2TrackListProxyPrivate *priv;
};

struct _Mpris2TrackListProxyClass
{
  GDBusProxyClass parent_class;
};

GType mpris2_track_list_proxy_get_type (void) G_GNUC_CONST;

void mpris2_track_list_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mpris2TrackList *mpris2_track_list_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Mpris2TrackList *mpris2_track_list_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mpris2_track_list_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Mpris2TrackList *mpris2_track_list_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Mpris2TrackList *mpris2_track_list_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define MPRIS2_TYPE_TRACK_LIST_SKELETON (mpris2_track_list_skeleton_get_type ())
#define MPRIS2_TRACK_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MPRIS2_TYPE_TRACK_LIST_SKELETON, Mpris2TrackListSkeleton))
#define MPRIS2_TRACK_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MPRIS2_TYPE_TRACK_LIST_SKELETON, Mpris2TrackListSkeletonClass))
#define MPRIS2_TRACK_LIST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MPRIS2_TYPE_TRACK_LIST_SKELETON, Mpris2TrackListSkeletonClass))
#define MPRIS2_IS_TRACK_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MPRIS2_TYPE_TRACK_LIST_SKELETON))
#define MPRIS2_IS_TRACK_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MPRIS2_TYPE_TRACK_LIST_SKELETON))

typedef struct _Mpris2TrackListSkeleton Mpris2TrackListSkeleton;
typedef struct _Mpris2TrackListSkeletonClass Mpris2TrackListSkeletonClass;
typedef struct _Mpris2TrackListSkeletonPrivate Mpris2TrackListSkeletonPrivate;

struct _Mpris2TrackListSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Mpris2TrackListSkeletonPrivate *priv;
};

struct _Mpris2TrackListSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mpris2_track_list_skeleton_get_type (void) G_GNUC_CONST;

Mpris2TrackList *mpris2_track_list_skeleton_new (void);


G_END_DECLS

#endif /* __MPRIS2_TRACKLIST_GENERATED_H__ */
