#!/usr/bin/env python3

# Copyright (C) 2010, 2011, 2012, 2013, 2014 Thomas Jost
#
# This file is part of spop.
#
# spop is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# spop is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# spop. If not, see <http://www.gnu.org/licenses/>.
#
# Additional permission under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or combining it
# with libspotify (or a modified version of that library), containing parts
# covered by the terms of the Libspotify Terms of Use, the licensors of this
# Program grant you additional permission to convey the resulting work.

import json
import socket
import subprocess

# {{{ Parameters
# Possible values: {index}, {artist}, {track}, {album}, {duration}, {uri}, {playing}
TRACK_FMT = "{index} - {artist} - {album} - {track} ({duration})"
SEARCH_ALBUM_FMT = "({year}) {artist} - {album} ({tracks} tracks)"
SEARCH_TRACK_FMT = "{artist} - {album} - {track} ({duration})"

DMENU_OPTS = ["-dmenu" , "-columns" , "1"]
# }}}
# {{{ Spop client
class SpopClient:
    def __init__(self, host, port):
        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self._sock.connect((host, port))
        self.greeting = self._sock.recv(1024).decode().strip()

    def _command(self, command, *args):
        esc_args = ['"'+arg.replace('"', '\"')+'"' if type(arg) is str else str(arg) for arg in args]
        esc_args.insert(0, command)
        cmd = " ".join(esc_args) + "\n"
        self._sock.send(cmd.encode())

        buf = b""
        while True:
            tmp = self._sock.recv(1024)
            buf += tmp
            try:
                obj = json.loads(buf.decode())
                return obj
            except:
                pass

    def __getattr__(self, name):
        if name in ("repeat", "shuffle", "qclear", "qls", "ls", "goto", "add", "next", "prev", "toggle", "play", "offline_toggle",
                    "search", "status", "uadd", "uinfo", "uplay"):
            def func(*attrs):
                return self._command(name.replace("_", "-"), *attrs)
            return func
        else:
            raise AttributeError
# }}}
# {{{ Dmenu interaction
def dmenu(items, highlight=[], prompt="dspop > "):
    args = ["rofi", "-p", prompt ]
    args.extend(DMENU_OPTS)
    if len(highlight) > 0:
        test = ["-u", ",".join(highlight) ]
        args.extend(test)

    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    for it in items:
        p.stdin.write((it+"\n").encode())

    out, _ = p.communicate()

    if len(out) == 0:
        return None

    out = out[:-1].decode()
    return items.index(out)

def dmenu_input(prompt):
    args = ["rofi", "-p", prompt]
    args.extend(DMENU_OPTS)
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out, _ = p.communicate()
    return out[:-1].decode()


def format_search_album(album):
    params = {
        "album": album["title"],
        "artist": album["artist"],
        "year": album["year"],
        "type": album["album_type"],
        "tracks": len(album["tracks"]),
    }
    return SEARCH_ALBUM_FMT.format(**params)

def format_search_track(track):
    params = {
        "album": track["album"],
        "artist": track["artist"],
        "duration": "%d:%02d" % divmod(track["duration"]/1000, 60),
        "index": track["index"],
        "track": track["title"],
        "uri": track["uri"]
    }
    return SEARCH_TRACK_FMT.format(**params)

def format_tracks(tracks, current_track):
    index_len = len(str(len(tracks)))
    index_format = "%{}d".format(index_len)

    items = []
    for track in tracks:
        params = {
            "album": track["album"],
            "artist": track["artist"],
            "duration": "%d:%02d" % divmod(track["duration"]/1000, 60),
            "index": index_format % track["index"],
            "track": track["title"],
            "uri": track["uri"],
            "playing": "* " if "uri" in current_track and current_track["uri"] == track["uri"] else "  ",
        }
        items.append(TRACK_FMT.format(**params))
    return items

def format_folder(items, indent=0, offline_status=False):
    dst, indices = [], []
    for it in items:
        if not it:
            continue
        if it["type"] == "separator":
            dst.append(" " * (indent + (4 if offline_status else 0)) + "-"*40)
            indices.append(None)
        elif it["type"] == "folder":
            dst.append(" " * (indent + (4 if offline_status else 0)) + "+ " + it["name"])
            indices.append(None)
            rdst, rind = format_folder(it["playlists"], indent+2, offline_status)
            dst.extend(rdst)
            indices.extend(rind)
        elif it["type"] == "playlist":
            s = " "*indent
            if offline_status:
                s = ("[X] " if it["offline"] else "[ ] ") + s
            s += "{0[name]} ({0[tracks]})".format(it)
            dst.append(s)
            indices.append(it["index"])
    return dst, indices
# }}}
# {{{ Menus
def main_menu(sc):
    done = False
    while not done:
        choices = [
            ("queue",     "[ Queue ]>"),
            ("playlists", "[ Playlists ]>"),
            ("repeat",    "[ Repeat ]"),
            ("shuffle",   "[ Shuffle ]"),
            ("sep",       "-"*40),
            ("search",    "[ Search ]>"),
            ("offline",   "[ Offline playlists ]>"),
            ("sep",       "-"*40),
            ("toggle",    "[ Toggle Playback ]"),
            ("next",      "[ Next Track ]"),
            ("prev",      "[ Previous Track ]"),
        ]

        idx = dmenu([ch[1] for ch in choices])
        choice = None if idx is None else choices[idx][0]

        if choice is None:
            done = True
        elif choice == "queue":
            done = menu_queue(sc)
        elif choice == "playlists":
            done = menu_playlists(sc)
        elif choice == "offline":
            menu_offline(sc)
        elif choice == "repeat":
            sc.repeat()
        elif choice == "shuffle":
            sc.shuffle()
        elif choice == "toggle":
            sc.toggle()
        elif choice == "next":
            sc.next()
        elif choice == "prev":
            sc.prev()
        elif choice == "search":
            done = menu_search(sc)

def menu_queue(sc):
    done = False
    while not done:
        items = ["[ Clear queue ]"]

        tracks = sc.qls()["tracks"]
        current_track = sc.status()
        if "current_track" in current_track:
            play_track = [ str(current_track["current_track"]) ];
        try:
            items.extend(format_tracks(tracks, current_track))
            choice = dmenu(items, play_track, "Play Queue > ")
        except UnboundLocalError:
            choice = dmenu(items)

        if choice is None:
            done = True
        elif choice == 0:
            sc.qclear()
            done = True
        else:
            sc.goto(choice)
    return False

def menu_playlists(sc):
    pls = sc.ls()["playlists"]
    items, indices = format_folder(pls)

    done = False
    while not done:
        choice = dmenu(items)
        if choice is None:
            return False
        else:
            idx = indices[choice]
            if idx is None:
                continue
            done = menu_playlist(sc, idx)
    return True

def menu_playlist(sc, idx):
    tracks = sc.ls(idx)["tracks"]

    # TODO: handle unavailable tracks
    items = ["[ Set as queue ]", "[ Add to queue ]"]
    current_track = sc.status()
    items.extend(format_tracks(tracks, current_track))

    choice = dmenu(items)
    if choice is None:
        return False
    elif choice == 0:
        sc.play(idx)
        return False
    elif choice == 1:
        sc.add(idx)
        return False
    else:
        sc.play(idx, choice-1)
        return True

def menu_offline(sc):
    while True:
        pls = sc.ls()["playlists"]
        items, indices = format_folder(pls, offline_status=True)
        choice = dmenu(items)
        if choice is None:
            return False
        else:
            idx = indices[choice]
            if idx is None:
                continue
            sc.offline_toggle(idx)

def menu_search(sc):
    query = dmenu_input("Query > ")
    if len(query) == 0:
        return False

    res = sc.search(query)
    items = []
    albums, singles = [], []

    if "albums" in res and len(res["albums"]) > 0:
        for album in res["albums"]:
            if not album["available"]:
                continue
            ainfo = sc.uinfo(album["uri"])
            item = (album["uri"], "  " + format_search_album(ainfo), ainfo["year"])
            if ainfo["album_type"] == "single":
                singles.append(item)
            else:
                albums.append(item)

    if len(albums) > 0:
        albums.sort(key=lambda item: item[2])
        items.append((None, "Albums:"))
        items.extend(albums)

    if "tracks" in res and len(res["tracks"]) > 0:
        items.append((None, "Tracks:"))
        for track in res["tracks"]:
            if not track["available"]:
                continue
            items.append((track["uri"], "  " + format_search_track(track)))

    if len(singles) > 0:
        singles.sort(key=lambda item: item[2])
        items.append((None, "Singles:"))
        items.extend(singles)

    while True:
        idx = dmenu([it[1] for it in items])
        uri = None if idx is None else items[idx][0]
        if uri is None:
            return False

        sel_items = ["[ Set as queue ]", "[ Add to queue ]"]
        sel_choice = dmenu(sel_items)
        if sel_choice == 0:
            sc.uplay(uri)
        elif sel_choice == 1:
            sc.uadd(uri)
# }}}

if __name__ == "__main__":
    sc = SpopClient("localhost", 6602)
    main_menu(sc)

# Local Variables:
# mode: python
# End:
